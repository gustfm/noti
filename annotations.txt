// printf("%s\n", ((Note *)(notes->data))->filename);
// printf("%s\n", ((Note *)(notes->data))->created_at);

// GtkWidget *list_view = gtk_list_view_new(NULL, NULL);
// GListStore *store = g_list_store_new(G_TYPE_STRING);
// gtk_list_view_set_model(GTK_LIST_VIEW(list_view), GTK_SELECTION_MODEL(store));

// append_text(list_view, "Item 1");
// append_text(list_view, "Item 2");
// append_text(list_view, "Item 3");

// GtkSelectionModel *model = GTK_SELECTION_MODEL(gtk_single_selection_new(G_LIST_MODEL(notes)));

// char *_notes[] = {
//     "one", "two", "three", "four", NULL};

// GtkStringList *notes_string_list = gtk_string_list_new((const char *const *)_notes);
// GtkNoSelection *notes_no_selection = gtk_no_selection_new(G_LIST_MODEL(notes_string_list));

// GtkListItemFactory *factory = gtk_signal_list_item_factory_new();
// g_signal_connect(factory, "setup", G_CALLBACK(setup_cb), NULL);
// g_signal_connect(factory, "bind", G_CALLBACK(bind_cb), NULL);

// GtkWidget *list = gtk_list_view_new(GTK_SELECTION_MODEL(notes_no_selection), factory);
g_signal_connect(listbox, "row-activated", G_CALLBACK(activate_cb), NULL);
// gtk_list_view_set_single_click_activate(GTK_LIST_VIEW(list), TRUE);
// gtk_window_present(GTK_WINDOW(window));
return listbox;

// GtkSelectionModel *model = GTK_SELECTION_MODEL(gtk_single_selection_new(G_LIST_MODEL(notes)));

// GtkWidget *list_view = gtk_list_view_new();

// gtk_list_view_set_model(list_view);



----



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <glib.h>

#include "files_handler.c"

typedef struct
{
    int id;
    char filename[30];
    char created_at[11];
} Note;

char *get_current_formatted_time(time_t date)
{
    char *formatted_date;
    struct tm *timeinfo = localtime(&date);
    strftime(formatted_date, sizeof(char[11]), "%d/%m/%Y", timeinfo);
    return formatted_date;
}

GList *push(GList *notes, int id, char *filename, char *_formatted_date)
{
    char formatted_date[11];
    if (!_formatted_date)
    {
        time_t date = time(NULL);
        strcpy(formatted_date, get_current_formatted_time(date));
    }
    else
    {
        strcpy(formatted_date, _formatted_date);
    }
    Note *_note = g_new(Note, 1);
    _note->id = id;
    strcpy(_note->filename, filename);
    strcpy(_note->created_at, _formatted_date ? _formatted_date : formatted_date);
    return g_list_append(notes, _note);
}

GList *init_notes()
{
    GList *notes = NULL;
    return notes;
}

GList *get_notes()
{
    FILE *fp;
    fp = open_db_file();
    GList *notes = init_notes();

    char response[60];
    int rows_length = get_row(fp, response);
    int id = 1;
    while (rows_length > 0)
    {
        char *str = get_str(response);
        char *items[2];
        int index = 0;
        while (str != NULL)
        {
            items[index] = str;
            index++;
            str = get_str(NULL);
        }

        notes = push(notes, id, items[0], items[1]);
        rows_length = get_row(fp, response);
        id++;
    }

    return notes;
}

void get_note_content(char *filename)
{
    FILE *fp;
    fp = open_note_file(filename);
    char response[100];
    int a = fscanf(fp, "%s\n", &response[0]);
    printf("%d", a);
    // printf("uau -> %s", response);
    // return (char *)get_str(response);
}

int main()
{
    get_note_content("file1.txt");
    // printf("2->%s\n", content);
    return 0;
}

// int main()
// {
//     FILE *fp;
//     fp = open_db_file();
//     GList *notes = init_notes();

//     char response[60];
//     int rows_length = get_row(fp, response);
//     int id = 1;
//     while (rows_length > 0)
//     {
//         char *str = get_str(response);
//         char *items[2];
//         int index = 0;
//         while (str != NULL)
//         {
//             items[index] = str;
//             index++;
//             str = get_str(NULL);
//         }

//         notes = push(notes, id, items[0], items[1]);
//         rows_length = get_row(fp, response);
//         id++;
//     }

//     printf("%s\n", ((Note *)(notes->data))->filename);
//     printf("%s\n", ((Note *)(notes->data))->created_at);

//     fclose(fp);

//     return 0;
// }

// int main()
// {

//     GList *notes = NULL;

//     notes = push(notes, 1, "file1.txt");

//     printf("%d\n", ((Note *)(notes->data))->id);
//     printf("%s\n", ((Note *)(notes->data))->filename);
//     printf("%s\n", ((Note *)(notes->data))->created_at);
//     printf("%ld\n", ((Note *)(notes->data))->created_at_timestamp);

//     g_list_free(notes);

//     return 0;
// }